TCP requires the sender and receiver to setup a connection between eachother. It offers reliable end-to-end delivery between the sending and receiving processes. Used in email and file transfer, where loss of data should never occur.
UDP is a very basic delivery service that does not require a connection between client and server. Instead, one side simply sends data to the other, which speeds up transmissions since connection agreements are not needed. Used in loss-tolerant platforms like streaming multimedia (YouTube) and internet telephony (Skype)

(python code snippets are in "quotes")
In python, a connection is established between two TCP sockets. These sockets are made by using SOCK_STREAM when creating the socket "sock = socket(AF_INET, SOCK_STREAM)". the server waits for incoming connections "sock.listen(1)". The client sends a request to connect to the server socket "sock.connect(server_address)", and the server must accept for the connection to be established "connection, client_address = sock.accept()". Data is sent/received over the connection "connection.recv(64).decode()" "connection.sendall(message.encode())". On the server side, the connection must be closed "connection.close()"
For python UDP, connections are not needed. UDP sockets are created differently to show that they are UDP sockets "sock = socket(AF_INET, SOCK_DGRAM)". Instead of a connection, the UDP socket sends data to the server's ip address and port "sock.sendto(message.encode(), (ip_address, port))". Data is sent and received over the socket ratehr than the connection. "sock.recv(256).decode()". 
